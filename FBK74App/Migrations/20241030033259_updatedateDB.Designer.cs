// <auto-generated />
using System;
using FBK74App.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FBK74App.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241030033259_updatedateDB")]
    partial class updatedateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FBK74App.models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4395),
                            Email = "user1@example.com",
                            Password = "pass1",
                            PhoneNumber = "1234567890",
                            Status = "Active",
                            Type = 0,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4408),
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4411),
                            Email = "user2@example.com",
                            Password = "admin",
                            PhoneNumber = "1234567891",
                            Status = "Inactive",
                            Type = 1,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4412),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4413),
                            Email = "user3@example.com",
                            Password = "pass3",
                            PhoneNumber = "1234567892",
                            Status = "Active",
                            Type = 0,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4414),
                            UserName = "user3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4446),
                            Email = "user4@example.com",
                            Password = "pass4",
                            PhoneNumber = "1234567893",
                            Status = "Inactive",
                            Type = 0,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4447),
                            UserName = "user4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4448),
                            Email = "user5@example.com",
                            Password = "pass5",
                            PhoneNumber = "1234567894",
                            Status = "Active",
                            Type = 0,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4448),
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("FBK74App.models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Account2Id")
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisteredFootballFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("RegisteredFootballFieldId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Account2Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RegisteredFootballFieldId");

                    b.HasIndex("RegisteredFootballFieldId1");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account2Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4660),
                            Invoice = "INV001",
                            PaymentDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4659),
                            RegisteredFootballFieldId = 1,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4660)
                        },
                        new
                        {
                            Id = 2,
                            Account2Id = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4662),
                            Invoice = "INV002",
                            PaymentDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4662),
                            RegisteredFootballFieldId = 2,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4663)
                        },
                        new
                        {
                            Id = 3,
                            Account2Id = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4664),
                            Invoice = "INV003",
                            PaymentDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4664),
                            RegisteredFootballFieldId = 3,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4665)
                        },
                        new
                        {
                            Id = 4,
                            Account2Id = 4,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4667),
                            Invoice = "INV004",
                            PaymentDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4667),
                            RegisteredFootballFieldId = 4,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4668)
                        },
                        new
                        {
                            Id = 5,
                            Account2Id = 5,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4669),
                            Invoice = "INV005",
                            PaymentDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4669),
                            RegisteredFootballFieldId = 5,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4670)
                        });
                });

            modelBuilder.Entity("FBK74App.models.FootballField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FootballFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Field1",
                            Price = 100.0m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Field2",
                            Price = 200.0m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Field3",
                            Price = 300.0m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Field4",
                            Price = 400.0m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Field5",
                            Price = 500.0m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FBK74App.models.FootballFieldSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("FootballFieldId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FootballFieldId");

                    b.ToTable("FootballFieldSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4802),
                            EndTime = new TimeOnly(7, 30, 0),
                            FootballFieldId = 1,
                            StartTime = new TimeOnly(6, 30, 0),
                            Status = "Scheduled",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4803)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4805),
                            EndTime = new TimeOnly(8, 30, 0),
                            FootballFieldId = 2,
                            StartTime = new TimeOnly(7, 30, 0),
                            Status = "Scheduled",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4806)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4807),
                            EndTime = new TimeOnly(9, 30, 0),
                            FootballFieldId = 3,
                            StartTime = new TimeOnly(8, 30, 0),
                            Status = "Scheduled",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4808)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4810),
                            EndTime = new TimeOnly(10, 30, 0),
                            FootballFieldId = 4,
                            StartTime = new TimeOnly(9, 30, 0),
                            Status = "Scheduled",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4810)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4812),
                            EndTime = new TimeOnly(11, 30, 0),
                            FootballFieldId = 5,
                            StartTime = new TimeOnly(10, 30, 0),
                            Status = "Scheduled",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4812)
                        });
                });

            modelBuilder.Entity("FBK74App.models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4605),
                            Description = "Description1",
                            Image = "image1.jpg",
                            Name = "Product1",
                            Quantity = 10,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4606)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4607),
                            Description = "Description2",
                            Image = "image2.jpg",
                            Name = "Product2",
                            Quantity = 20,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4608)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4609),
                            Description = "Description3",
                            Image = "image3.jpg",
                            Name = "Product3",
                            Quantity = 30,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4609)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4610),
                            Description = "Description4",
                            Image = "image4.jpg",
                            Name = "Product4",
                            Quantity = 40,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4611)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4612),
                            Description = "Description5",
                            Image = "image5.jpg",
                            Name = "Product5",
                            Quantity = 50,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4612)
                        });
                });

            modelBuilder.Entity("FBK74App.models.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillId = 1,
                            ProductId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 2,
                            BillId = 2,
                            ProductId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 3,
                            BillId = 3,
                            ProductId = 3,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 4,
                            BillId = 4,
                            ProductId = 4,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 5,
                            BillId = 5,
                            ProductId = 5,
                            Quantity = 25
                        });
                });

            modelBuilder.Entity("FBK74App.models.RegistFindOppoent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Account1Id")
                        .HasColumnType("int");

                    b.Property<int>("Account2Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfFootballField")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Account1Id");

                    b.HasIndex("Account2Id");

                    b.ToTable("RegistFindOppoents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account1Id = 1,
                            Account2Id = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4739),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4736),
                            Deposit = 100.0m,
                            EndTime = new DateTime(2024, 10, 30, 12, 32, 57, 257, DateTimeKind.Local).AddTicks(4731),
                            Name = "Opponent1",
                            Phone = "1234567890",
                            Power = "High",
                            StartTime = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4730),
                            Status = 1,
                            TypeOfFootballField = 1,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4739)
                        },
                        new
                        {
                            Id = 2,
                            Account1Id = 2,
                            Account2Id = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4743),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4742),
                            Deposit = 200.0m,
                            EndTime = new DateTime(2024, 10, 30, 12, 32, 57, 257, DateTimeKind.Local).AddTicks(4741),
                            Name = "Opponent2",
                            Phone = "1234567891",
                            Power = "Medium",
                            StartTime = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4741),
                            Status = 2,
                            TypeOfFootballField = 2,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4743)
                        },
                        new
                        {
                            Id = 3,
                            Account1Id = 3,
                            Account2Id = 4,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4746),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4746),
                            Deposit = 300.0m,
                            EndTime = new DateTime(2024, 10, 30, 12, 32, 57, 257, DateTimeKind.Local).AddTicks(4745),
                            Name = "Opponent3",
                            Phone = "1234567892",
                            Power = "Low",
                            StartTime = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4745),
                            Status = 3,
                            TypeOfFootballField = 3,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4747)
                        },
                        new
                        {
                            Id = 4,
                            Account1Id = 4,
                            Account2Id = 5,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4752),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4751),
                            Deposit = 400.0m,
                            EndTime = new DateTime(2024, 10, 30, 12, 32, 57, 257, DateTimeKind.Local).AddTicks(4748),
                            Name = "Opponent4",
                            Phone = "1234567893",
                            Power = "High",
                            StartTime = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4748),
                            Status = 1,
                            TypeOfFootballField = 1,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4752)
                        },
                        new
                        {
                            Id = 5,
                            Account1Id = 5,
                            Account2Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4755),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4754),
                            Deposit = 500.0m,
                            EndTime = new DateTime(2024, 10, 30, 12, 32, 57, 257, DateTimeKind.Local).AddTicks(4754),
                            Name = "Opponent5",
                            Phone = "1234567894",
                            Power = "Medium",
                            StartTime = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4753),
                            Status = 2,
                            TypeOfFootballField = 2,
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4756)
                        });
                });

            modelBuilder.Entity("FBK74App.models.RegisteredFootballField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Account1Id")
                        .HasColumnType("int");

                    b.Property<int>("Account2Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FootballFieldScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistFindOppoentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Account1Id");

                    b.HasIndex("Account2Id");

                    b.HasIndex("FootballFieldScheduleId");

                    b.HasIndex("RegistFindOppoentId");

                    b.ToTable("RegisteredFootballFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account1Id = 1,
                            Account2Id = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4700),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4698),
                            Deposit = 100.0m,
                            FootballFieldScheduleId = 1,
                            Name = "Field1",
                            Note = "Note1",
                            RegistFindOppoentId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4700)
                        },
                        new
                        {
                            Id = 2,
                            Account1Id = 2,
                            Account2Id = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4703),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4702),
                            Deposit = 200.0m,
                            FootballFieldScheduleId = 2,
                            Name = "Field2",
                            Note = "Note2",
                            RegistFindOppoentId = 2,
                            Status = "Inactive",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4703)
                        },
                        new
                        {
                            Id = 3,
                            Account1Id = 3,
                            Account2Id = 4,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4705),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4705),
                            Deposit = 300.0m,
                            FootballFieldScheduleId = 3,
                            Name = "Field3",
                            Note = "Note3",
                            RegistFindOppoentId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4706)
                        },
                        new
                        {
                            Id = 4,
                            Account1Id = 4,
                            Account2Id = 5,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4708),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4707),
                            Deposit = 400.0m,
                            FootballFieldScheduleId = 4,
                            Name = "Field4",
                            Note = "Note4",
                            RegistFindOppoentId = 4,
                            Status = "Inactive",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4709)
                        },
                        new
                        {
                            Id = 5,
                            Account1Id = 5,
                            Account2Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4711),
                            Date = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4710),
                            Deposit = 500.0m,
                            FootballFieldScheduleId = 5,
                            Name = "Field5",
                            Note = "Note5",
                            RegistFindOppoentId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 10, 30, 10, 32, 57, 257, DateTimeKind.Local).AddTicks(4711)
                        });
                });

            modelBuilder.Entity("FBK74App.models.Bill", b =>
                {
                    b.HasOne("FBK74App.models.Account", "Account2")
                        .WithMany()
                        .HasForeignKey("Account2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBK74App.models.Account", null)
                        .WithMany("Bills")
                        .HasForeignKey("AccountId");

                    b.HasOne("FBK74App.models.RegisteredFootballField", "RegisteredFootballField")
                        .WithMany()
                        .HasForeignKey("RegisteredFootballFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBK74App.models.RegisteredFootballField", null)
                        .WithMany("Bills")
                        .HasForeignKey("RegisteredFootballFieldId1");

                    b.Navigation("Account2");

                    b.Navigation("RegisteredFootballField");
                });

            modelBuilder.Entity("FBK74App.models.FootballFieldSchedule", b =>
                {
                    b.HasOne("FBK74App.models.FootballField", "FootballField")
                        .WithMany("FootballFieldSchedules")
                        .HasForeignKey("FootballFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootballField");
                });

            modelBuilder.Entity("FBK74App.models.ProductDetail", b =>
                {
                    b.HasOne("FBK74App.models.Bill", "Bill")
                        .WithMany("Products")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBK74App.models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FBK74App.models.RegistFindOppoent", b =>
                {
                    b.HasOne("FBK74App.models.Account", "Account1")
                        .WithMany()
                        .HasForeignKey("Account1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBK74App.models.Account", "Account2")
                        .WithMany()
                        .HasForeignKey("Account2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account1");

                    b.Navigation("Account2");
                });

            modelBuilder.Entity("FBK74App.models.RegisteredFootballField", b =>
                {
                    b.HasOne("FBK74App.models.Account", "Account1")
                        .WithMany()
                        .HasForeignKey("Account1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBK74App.models.Account", "Account2")
                        .WithMany()
                        .HasForeignKey("Account2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FBK74App.models.FootballFieldSchedule", "FootballFieldSchedule")
                        .WithMany()
                        .HasForeignKey("FootballFieldScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBK74App.models.RegistFindOppoent", "RegistFindOppoent")
                        .WithMany()
                        .HasForeignKey("RegistFindOppoentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account1");

                    b.Navigation("Account2");

                    b.Navigation("FootballFieldSchedule");

                    b.Navigation("RegistFindOppoent");
                });

            modelBuilder.Entity("FBK74App.models.Account", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FBK74App.models.Bill", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FBK74App.models.FootballField", b =>
                {
                    b.Navigation("FootballFieldSchedules");
                });

            modelBuilder.Entity("FBK74App.models.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FBK74App.models.RegisteredFootballField", b =>
                {
                    b.Navigation("Bills");
                });
#pragma warning restore 612, 618
        }
    }
}
